"use client";

import { useEffect, useState } from 'react';

interface KeyboardAwareModalOptions {
  isOpen: boolean;
}

export function useKeyboardAwareModal({ isOpen }: KeyboardAwareModalOptions) {
  const [keyboardHeight, setKeyboardHeight] = useState(0);
  const [viewportHeight, setViewportHeight] = useState(0);
  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);
  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!isOpen) return; // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

    const initialViewportHeight = window.visualViewport?.height || window.innerHeight;
    setViewportHeight(initialViewportHeight);

    const handleViewportChange = () => {
      const currentHeight = window.visualViewport?.height || window.innerHeight;
      const heightDifference = initialViewportHeight - currentHeight;
      
      // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÅ‡∏õ‡πâ‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ viewport ‡∏™‡∏π‡∏á‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 150px
      const keyboardIsOpen = heightDifference > 150;
      
      setKeyboardHeight(keyboardIsOpen ? heightDifference : 0);
      setIsKeyboardOpen(keyboardIsOpen);
      setViewportHeight(currentHeight);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSS styling
      if (keyboardIsOpen) {
        document.body.classList.add('keyboard-open');
      } else {
        document.body.classList.remove('keyboard-open');
      }
      
      console.log('‚å®Ô∏è Keyboard state changed:', { keyboardIsOpen, heightDifference });
    };

    // Auto-scroll function ‡πÄ‡∏°‡∏∑‡πà‡∏≠ input ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö focus - ‡πÉ‡∏ä‡πâ debounce
    const handleInputFocus = (event: FocusEvent) => {
      const target = event.target as HTMLElement;
      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.tagName === 'SELECT') {
        console.log('üéØ Input needs scroll adjustment:', target); // Debug log
        
        // Clear existing timer
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
        
        // Set new timer - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scroll
        const newTimer = setTimeout(() => {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ input ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô scroll
          const inputRect = target.getBoundingClientRect();
          const availableHeight = window.visualViewport?.height || window.innerHeight;
          const keyboardOffset = isKeyboardOpen ? keyboardHeight : 0;
          const usableHeight = availableHeight - keyboardOffset;
          
          // ‡∏ñ‡πâ‡∏≤ input ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á scroll
          if (inputRect.top > 50 && inputRect.bottom < usableHeight - 50) {
            console.log('üéØ Input already visible, no scroll needed');
            return;
          }
          
          scrollInputIntoView(target);
        }, 300); // ‡∏•‡∏î delay
        
        setDebounceTimer(newTimer);
      }
    };

    // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scroll input ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ keyboard
    const scrollInputIntoView = (input: HTMLElement) => {
      // ‡∏´‡∏≤ modal container ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      const modalContainer = input.closest('.modal-body-scrollable, [data-slot="body"]') as HTMLElement;
      
      if (modalContainer) {
        console.log('üì± Scrolling within modal container');
        
        // Force focus ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ input ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        input.focus();
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ keyboard ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô scroll
        setTimeout(() => {
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scroll ‡πÉ‡∏ô modal
          const containerRect = modalContainer.getBoundingClientRect();
          const inputRect = input.getBoundingClientRect();
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á viewport ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å keyboard
          const availableHeight = window.visualViewport?.height || window.innerHeight;
          const keyboardOffset = isKeyboardOpen ? keyboardHeight : 250; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ keyboard 250px ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà detect
          const usableHeight = availableHeight - keyboardOffset;
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà input ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1/3 ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
          const targetPositionFromTop = Math.max(80, usableHeight * 0.3);
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scroll amount ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          const inputRelativeTop = inputRect.top - containerRect.top + modalContainer.scrollTop;
          const newScrollTop = inputRelativeTop - targetPositionFromTop;
          
          // Scroll ‡πÉ‡∏ô modal container
          modalContainer.scrollTo({
            top: Math.max(0, newScrollTop),
            behavior: 'smooth'
          });
          
        }, 100);
        
      } else {
        console.log('üåç Scrolling window (no modal container found)');
        
        // Fallback: scroll ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (simplified)
        input.focus();
        
        setTimeout(() => {
          input.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center'
          });
        }, 100);
      }
    };

    // Body padding management - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ keyboard ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const manageBodyPadding = () => {
      if (typeof window === 'undefined') return;
      
      if (isKeyboardOpen && keyboardHeight > 0) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° scroll space ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ keyboard ‡πÄ‡∏õ‡∏¥‡∏î
        const extraSpace = keyboardHeight + 100; // Keyboard height + 100px extra space
        console.log('üìè Adding body padding for keyboard:', extraSpace + 'px');
        document.body.style.paddingBottom = `${extraSpace}px`;
      } else {
        // ‡∏•‡∏ö padding ‡πÄ‡∏°‡∏∑‡πà‡∏≠ keyboard ‡∏õ‡∏¥‡∏î
        console.log('üìè Removing body padding - keyboard closed');
        document.body.style.paddingBottom = '';
      }
    };

    // Apply body padding management
    manageBodyPadding();

    // ‡πÉ‡∏ä‡πâ visualViewport API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile keyboard detection
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', handleViewportChange);
    } else {
      // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö browser ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö visualViewport
      window.addEventListener('resize', handleViewportChange);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input focus
    document.addEventListener('focusin', handleInputFocus);

    return () => {
      if (window.visualViewport) {
        window.visualViewport.removeEventListener('resize', handleViewportChange);
      } else {
        window.removeEventListener('resize', handleViewportChange);
      }
      document.removeEventListener('focusin', handleInputFocus);
      
      // Clear debounce timer
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
      
      // Clean up body padding when component unmounts
      if (typeof document !== 'undefined') {
        document.body.style.paddingBottom = '';
        document.body.classList.remove('keyboard-open');
      }
    };
  }, [isOpen, isKeyboardOpen, keyboardHeight, debounceTimer]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° debounceTimer

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì modal position ‡πÅ‡∏•‡∏∞ styling
  const getModalStyles = () => {
    // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á styles ‡πÉ‡∏î‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ ‡πÉ‡∏´‡πâ modal ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ 90vh
    // ‡πÅ‡∏Ñ‡πà‡πÉ‡∏ä‡πâ body padding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° scroll space ‡πÄ‡∏°‡∏∑‡πà‡∏≠ keyboard ‡πÄ‡∏õ‡∏¥‡∏î
    return {
      position: 'center' as const,
      styles: {}, // ‡πÑ‡∏°‡πà‡∏°‡∏µ style ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      className: '' // ‡πÑ‡∏°‡πà‡∏°‡∏µ class ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    };
  };

  return {
    keyboardHeight,
    isKeyboardOpen,
    viewportHeight,
    modalStyles: getModalStyles()
  };
}
